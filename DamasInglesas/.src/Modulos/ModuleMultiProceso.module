' Gambas module file

Public numeroprocesos As Integer
Public solucionCPU1 As ClassRespuesta
Public solucioncpu2 As ClassRespuesta
'' *****************************
'' otra forma de implementarlo....
'' url: http://code.google.com/p/intart/source/browse/trunk/juegos/base/_AgenteHeuristico.java?r=35
'' *****************************

Public Function MultiMinimax(board As Classboard, side As Integer, Depth As Integer, DepthMax As Integer, Evaluator As Integer) As ClassRespuesta

  Dim contenido As String
  Dim a As Integer
  Dim solucion As ClassRespuesta
  Dim movimientoArray As New ClassMovimiento[]
  Dim movelistArray As New ClassMoveListArray

  Dim movelistArrayCPU1 As New ClassMoveListArray
  Dim movelistArrayCPU2 As New ClassMoveListArray
  Dim comando As String

  Dim proceso1 As Process

  '  Dim movimi As ClassMovimiento
  Dim score As Float
  Dim bestscore As Float
  '  Dim nextmini As ClassRespuesta
  Dim boardtemp As New Classboard(8)

  Dim bestmovelistArray As New ClassMovelistArray

  If Depth > depthmax Then
    'hemos accedido a la profundidad de busqueda, retorna el valor del tablero y lista nula de movimientos
    solucion = New ClassRespuesta(ModuloCalculos.evaluateBoard(board, side, evaluator), Null)
    Return solucion
  Else

    movelistArray = ModuloCalculos.GenerateMoveList(board, side)

    'evaluar si solo existe en el tablero actual una sola jugada a ejecutar...
    If movelistArray.lista.count = 1 And depth = 0 Then
      'solo un movimiento posible...
      boardtemp = ModuloCalculos.MakeMove(board, movelistArray.lista[0], side)
      solucion = New ClassRespuesta(ModuloCalculos.evaluateBoard(boardtemp, side, evaluator), movelistArray.lista[0].movimiento)
      Return solucion
    Endif

    If movelistArray.lista.count = 0 Then
      'lista vacia
      solucion = New ClassRespuesta(ModuloCalculos.evaluateBoard(board, side, evaluator), Null)
      Return solucion
    Else
      bestscore = -999999
      'Ejemplo usando 2 procesos (para ordenador con 2 nucleos)
      numeroprocesos = 2

      'dividir en 2 lotes (por ser multiprocesador 2) las jugadas posibles...
      For a = 0 To movelistArray.lista.Max
        If (Int(a / 2) * 2) = a Then
          'es par..
          movelistArrayCPU1.lista.Add(movelistArray.lista[a])
        Else
          movelistArrayCPU2.lista.Add(movelistArray.lista[a])
        Endif
      Next
      'crear el archivo para cada proceso y un proceso...

      contenido = contenidoPartida(board, side, Depth, DepthMax, Evaluator, movelistArrayCPU1)
      File.Save("/tmp/contenido1.txt", contenido)
      comando = User.Home & "/CalculoDI.gambas /tmp/contenido1.txt"
      proceso1 = Shell comando For Read As "NumeroCPU1"

      contenido = contenidoPartida(board, side, Depth, DepthMax, Evaluator, movelistArrayCPU2)
      File.Save("/tmp/contenido2.txt", contenido)
      comando = User.Home & "/CalculoDI.gambas /tmp/contenido2.txt"
      proceso1 = Shell comando For Read As "NumeroCPU2"

      '  espero mientras no se haya obtenido solucion....
      'inicialmente el numeroprocesos=2
      While (numeroprocesos > 0)
        'espero un peque単o periodo de tiempo, a ver si se ha recibido respuestas de los dos procesos
        'cada proceso cada vez que responde, disminuye en una unidad el valor de "numeroprocesos"
        Wait 0.4
      Wend

      'se han recibido la informacion de los dos procesos...
      'comparo la mejor jugada del proceso 1 y del proceso 2, devolviendo la mejor...

      'fin del primer acto... :)
      bestscore = -999999
      '******************************************
      'lo hago para la primera jugada...
      '******************************************
      If solucionCPU1.valor = bestscore Then
        'la a単ado a la lista de mejores...
        bestmovelistArray.lista.Add(solucionCPU1.mov)
      Else

        If score > bestscore Then

          bestscore = score
          bestmovelistArray.lista.Clear()
          bestmovelistArray.lista.add(solucionCPU1.mov, 0)

        Endif

      Endif
      '******************************************
      'lo hago para la segunda jugada...
      '******************************************
      If solucionCPU2.valor = bestscore Then
        'la a単ado a la lista de mejores...
        bestmovelistArray.lista.Add(solucionCPU2.mov)
      Else

        If score > bestscore Then

          bestscore = score
          bestmovelistArray.lista.Clear()
          bestmovelistArray.lista.add(solucionCPU2.mov, 0)

        Endif

      Endif

      movimientoArray = bestmovelistArray.lista[Int(Rnd(0, bestmovelistArray.lista.count))].movimiento

      solucion = New ClassRespuesta(bestscore, movimientoArray)
      Return solucion
    Endif

  Endif

End

Public Sub NumeroCPU1_Read()

  Dim sLine As String
  Dim sCad As String[]
  Dim vx As Float

  Read #Last, sLine, -50
  sLine = Trim(sLine)

  If Val(sline) = 1 Then
    'todo ha ido correptamente
    'ha creado el archivo con la solucion optima
    'lo tengo que leer para obtener la jugada y la puntuacion...
    solucionCPU1 = leesolucion(User.home & "/solucion1.txt")
    Wait 0.1 'espero un poco para que de tiempo a la lectura y recibir la solucion...
    numeroprocesos -= 1 'disminuyo el numero de procesos activos el bucle while pueda salir...
  Endif

End

Public Sub NumeroCPU2_Read()

  Dim sLine As String
  Dim sCad As String[]
  Dim vx As Float

  Read #Last, sLine, -50
  sLine = Trim(sLine)

  If Val(sline) = 1 Then
    'todo ha ido correptamente
    'ha creado el archivo con la solucion optima
    'lo tengo que leer para obtener la jugada y la puntuacion...
    solucionCPU2 = leesolucion(User.home & "/solucion2.txt")
    Wait 0.1 'espero un poco para que de tiempo a la lectura y recibir la solucion...
    numeroprocesos -= 1
  Endif

End

Private Function leesolucion(fichero As String) As ClassRespuesta

  Dim cadena As New String[]
  Dim res As New ClassRespuesta

  cadena = Split(File.Load(fichero), "\n")
  'el primer dato contiene el valor de la jugada
  res.valor = cadena[0]
  'el resto contiene el movimiento
  res.mov = convierteMovimientos(cadena)
  Return res

End

'contenido de partida: toda la informacion del tablero, nivel, evaluacion, profundidad y cpu
Private Function contenidoPartida(board As Classboard, side As Integer, Depth As Integer, DepthMax As Integer, Evaluator As Integer, movelistArrayCPU As Classmovelistarray) As String

  Dim cadena As String

  cadena = "turno\n"
  cadena &= Str$(side) & "\n"
  cadena &= "profundiddad actual\n"
  cadena &= Str$(depth) & "\n"
  cadena &= "profundiddad maxima\n"
  cadena &= Str$(depthmax) & "\n"
  cadena &= "funcion evaluadora\n"
  cadena &= Str$(Evaluator) & "\n"

  cadena &= movelistArrayCPU.escribe() & "\n"
  cadena &= board.escribe() & "\n"

  Return cadena

End

Private Function convierteMovimientos(cadena As String) As ClassMovimiento[]
  'trocear la cadena en  "\n"
  'trocear la jugada en "|", la primera contiene el numero de jugada... (no vale para nada)
  'troce el movimeinto en "a"
  'elimina "(" y ")"
  'trocea en ,

  Dim listaMovimiento As New ClassMovimiento[]
  Dim a As Integer, b As Integer, c As Integer
  Dim jugada As New String[]
  Dim movimientojugada As New String[]
  Dim celda As New String[]
  Dim posi As New String[]
  Dim movimientotemp As New ClassMovimiento
  'elimino todos los ( y )
  cadena = Replace(cadena, "(", "")
  cadena = Replace(cadena, ")", "")

  jugada = Split(cadena, "\n")

  For a = 0 To jugada.count - 1
    movimientojugada = Split(jugada[a], "|")
    For b = 1 To movimientojugada 'salto el 0 ya que contiene el numero de jugada...
      celda = Split(movimientojugada[b], "a")
      For c = 0 To celda.count - 1
        posi = Split(celda[c], ",")
        movimientotemp = New ClassMovimiento
        If Int(b / 2) * 2 = b * 2 Then
          movimientotemp.x0 = posi[0]
          movimientotemp.y0 = posi[1]
        Else
          movimientotemp.x1 = posi[0]
          movimientotemp.y1 = posi[1]

        Endif
      Next
      'a単ado el movimiento al array de movimientos
      listaMovimiento.Add(movimientotemp)
    Next

  Next

  Return listaMovimiento

End
