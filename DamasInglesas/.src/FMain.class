' Gambas class file

'Fuente original:  http://smallbasic.sourceforge.net/?q=node/72
'Autor original: Ken Goldberg
'url interesantes juego en java online: http://e6e6a5f4.linkbucks.com
'url juego entre humanos: http://e2577960.linkbucks.com
'*********************************************
'comentarios especiales:
'*********************************************
'FIXME: comentario especial (color rojo)
'NOTE: comentario especial (color negro)
'TODO: comentario especial (colo verde)
Public turno As Integer 'controla el turno del jugador que tiene que jugar ahora
Public tablero As New ClassBoard(constantes.squares)
Public casilla As Integer '1 es la primera casilla seleccionada (origen) , 2 es la casilla la 2ยบ casilla (destino)
Public finjuego As Boolean
Public listamovimientos As New ClassMovimiento[] 'lista de movimientos a realizar..

Public ejecutajugada As Boolean 'revisa si la jugada introducida por un humano se puede hacer

'editar un tablero...
Public editandotablero As Integer
Public piezaAponer As Integer
Public xant As Integer
Public yant As Integer

Public Sub _new()

End

Public Sub Form_Open()

  constantes.squares = 8
  GenerarGridJugadas()
  Me.Caption = ("Damas Inglesas")
  Constantes.iniciar

  Me.center
  tablero.displayboard(DrawingArea1)

End

Public Sub ToolButtonConfigurar_Click()

  FormConfigurar.ShowDialog
  tablero.inicio(Constantes.squares)
  tablero.displayboard(DrawingArea1)

End

Public Sub ToolButtonJugar_Click()

  Dim jugadorturno As String

  FormNueva.ShowDialog()
  GenerarGridJugadas()

  jugadorturno = If(turno = Constantes.black, "Negro", "Blanco")
  LabelMensajes.text = "Turno del jugador " & jugadorturno & " (" & Constantes.PlayerStrategy[Constantes.Colorblack] & ")"
  LabelMensajes.Refresh()

  'para desactivar boton de posicion y boton de jugar posicion
  ToolButtonCrearPosicion.Enabled = False
  ButtonJugar.enabled = False

  FMain.finjuego = False
  Wait 0.01
  tablero.inicio(constantes.squares)
  tablero.displayboard(drawingarea1)

  'compruebo que el jugador white es humano
  If constantes.PlayerStrategy[Str$(turno)] <> "0" Then
    'es el turno del ordenador

    RelojIA()

  Endif

End

Public Sub ToolButton1_Click()

  FormAcercaDe.show

End

Public Sub jugar()

  Dim listamovimientos As ClassMovimiento[]
  'comprobar ganador

  Dim movimientos As New ClassMovimiento[]

  movimientos = ModuloCalculos.GenerateMoveList(tablero, constantes.white)

  If movimientos.max = 0 Then
    Message.Info(("Ganador es el jugador Negro"))
    finjuego = True
  Else
    '' conseguir lista movimiento
    listamovimientos = ModuloCalculos.DetermineMove(tablero, constantes.white)

    '' aplicar movimiento
    tablero = ModuloCalculos.makemove(tablero, listamovimientos, True)
    '' mostrar tablero
    tablero.displayboard(DrawingArea1)
  Endif

  movimientos = ModuloCalculos.generateMove(tablero, Constantes.black)
  If movimientos.max = 0 Then

    Message.Info(("Ganador es el jugador Blanco"))
    finjuego = True
  Else
    '' conseguir lista movimiento
    listamovimientos = ModuloCalculos.DetermineMovimiento(tablero, constantes.black)
    '' aplicar movimiento
    tablero = ModuloCalculos.makemove(tablero, listamovimientos, True)
    '' mostrar tablero
    tablero.displayboard(DrawingArea1)
  Endif

End

Public Sub ButtonCancela_Click()

  tablero.seleccionado[0, 0] = 0
  tablero.seleccionado[0, 1] = 0
  tablero.seleccionado[1, 0] = 0
  tablero.seleccionado[1, 1] = 0
  tablero.displayboard(DrawingArea1)
  casilla = 0

End

Public Sub Form_Close()

  tablero = Null

End

Public Sub RelojIA()

  Dim profundidad As Integer
  Dim solucion As ClassRespuesta
  Dim jugada As New Classmovelist

  If finjuego = True Then Return

  If constantes.PlayerStrategy[Str$(turno)] <> "0" Then
    'es el turno del ordenador...
    LabelMensajes.text &= (". Pensando...")

    '[
    '  LabelMensajes.text = Replace(LabelMensajes.text, (". Pensando..."), "")
    Wait 0.01
    '********************************************************
    'aumenta la profundidad del analisis para pocas piezas...
    '********************************************************
    profundidad = 2

    If tablero.piezasDisponibles(- turno) < 8 Then
      profundidad = 3
    Endif
    If tablero.piezasDisponibles(- turno) < 6 Then
      profundidad = 4
    Endif

    Select constantes.PlayerStrategy[Str$(turno)]
        'NOTE: tipos de inteligencia artificial IA
        ' minimax(board As Classboard, side As Integer, Depth As Integer, DepthMax As Integer, Evaluator As Integer)
        '  Select Evaluator
        ' Case 1      Return scoreS(tablero, side) 'solo cuenta piezas
        ' Case 2      Return scoreSimple(tablero, side) 'cuenta piezas y reinas al centro.
        ' Case 3      Return scoreNat(tablero, side)
        ' Case 4      Return scoreSam(tablero, side)
      Case 1

        solucion = ModuloCalculos.Minimax(tablero, turno, 0, profundidad, 1) 'solo valores de piezas...
        jugada.movimiento = solucion.mov

      Case 2
        solucion = ModuloCalculos.Minimax(tablero, turno, 0, profundidad + 1, 2) 'valoracion tablero Nat
        jugada.movimiento = solucion.mov

      Case 3
        solucion = ModuloCalculos.Minimax(tablero, turno, 0, profundidad + 1, 2)
        jugada.movimiento = solucion.mov

    End Select
    Print "Valoracion.."; solucion.valor
    If jugada.movimiento <> Null Then
      escribeMovimientoyCambiaTurno(jugada)
      tablero.displayboard(drawingarea1)
      Wait 0.5
      '  Print jugada.escribe()
      ']
      If constantes.PlayerStrategy[Str$(turno)] <> "0" Then
        'es el turno del ordenador
        comprobarVictoria()
        '  Wait 1000 'espero 0.5 segundo para recibir ordenes del GUI
        RelojIA()
        comprobarVictoria()
      Endif

    Else
      comprobarVictoria()
    Endif

  Endif

End

' Escribe movimiento en tablero
Public Sub escribeMovimientoyCambiaTurno(jugada As Classmovelist)

  Dim listamovArray As New ClassMoveListArray

  If finjuego <> True Then
    tablero = ModuloCalculos.MakeMove(tablero, jugada, False)
    tablero.displayboard(drawingarea1)
    jugada.escribegrid(GridJugadas, turno)
    comprobarVictoria()
    'cambio turno
    If turno = constantes.white Then
      turno = constantes.black
      LabelMensajes.text = "Turno del jugador Negro (" & Constantes.PlayerStrategy[Constantes.Colorblack] & ")"
      'comprobar que hay movimientos posibles, si no lo hay gana el Blanco...
      'FIXME: turnos...
      listamovArray = ModuloCalculos.GenerateMoveList(tablero, turno)
      If listamovArray.lista.count = 0 Then
        message.info("Ganan las Blancas porque no puedes mover ninguna pieza")
        finjuego = True
      Endif

    Else
      turno = constantes.white
      LabelMensajes.text = "Turno del jugador Blanco (" & Constantes.PlayerStrategy[Constantes.Colorwhite] & ")"
      'comprobar que hay movimientos posibles, si no lo hay gana el Negro...
      listamovArray = ModuloCalculos.GenerateMoveList(tablero, turno)
      If listamovArray.lista.count = 0 Then
        message.info("Ganan las Negras porque no puedes mover ninguna pieza")
        finjuego = True
      Endif
    Endif
  Endif

End

Public Sub GenerarGridJugadas()

  With GridJugadas
    .mode = Select.Single 'para que aparezca el cursor
    .header = 3
    .rows.count = 0
    .columns.count = 2
    .Columns[0].title = "Negras"
    .Columns[1].title = "Blancas"
    .Columns[0].width = 100
    .Columns[1].width = 100
    .font.name = "Bitstream Charter"
    .font.size = 8
    .Background = 16777215
    .Foreground = 0
  End With

End

Public Sub GridJugadas_Select()

  Dim a As Integer
  Dim b As Integer

  For a = 0 To GridJugadas.columns.count - 1
    For b = 0 To GridJugadas.Rows.count - 1

      GridJugadas[b, a].Background = Color.White

    Next
  Next
  '
  'marcar celda
  Try GridJugadas[GridJugadas.row, GridJugadas.column].Background = Color.green
  '

End

Public Sub comprobarVictoria()

  Dim s As Integer
  Dim tienen As String
  'si hay piezas, entonces
  'si solo hay blancas-> victoria blancas
  If finjuego = True Then Return

  If tablero.piezasDisponibles(constantes.white) Then
    'hay piezas blancas
    s = 1
    tienen = "blancas"
  Endif

  If tablero.piezasDisponibles(constantes.black) Then
    'hay piezas negras
    s = 1
    tienen &= "negras"
  Endif

  If tienen = "" Then
    Message.Info("Tablas!!!\nNo puedo hacer ningun movimiento")
    finjuego = True
    'para desactivar boton de posicion y boton de jugar posicion
    ToolButtonCrearPosicion.Enabled = True
    ButtonJugar.visible = True

  Else
    If InStr(tienen, "blancas") <> 0 And InStr(tienen, "negras") = 0 Then
      Message.Info("Blancas ganan!!!")
      finjuego = True
      'para desactivar boton de posicion y boton de jugar posicion
      ToolButtonCrearPosicion.Enabled = True
      ButtonJugar.visible = True

    Else
      If InStr(tienen, "blancas") = 0 And InStr(tienen, "negras") <> 0 Then
        Message.Info("Negras ganan!!!")
        finjuego = True
        'para desactivar boton de posicion y boton de jugar posicion
        ToolButtonCrearPosicion.Enabled = True
        ButtonJugar.visible = True

      Endif
    Endif
  Endif

End

Public Sub DrawingArea1_MouseDown()

  Dim a As Integer
  Dim mimovimientoinicial As String
  Dim mimovimientofinal As String
  Dim listamovArray As New ClassMoveListArray
  Dim listamov As New ClassMoveList

  Dim mov As ClassMovimiento
  Dim x As Integer
  Dim y As Integer

  x = Int(Mouse.x / (DrawingArea1.h / constantes.squares)) + 1
  y = Int(Mouse.y / (DrawingArea1.h / constantes.squares)) + 1
  '  Print x, y
  'he pulsado click en el area de dibujo...
  'compruebo que el jugador del turno es "Humano"
  If constantes.PlayerStrategy[Str$(turno)] = "0" Then
    'obtengo coordenada x,y del tablero donde he hecho clik..

    'es Humano
    If casilla = 2 Then

      If tablero.tablero[x, y] = constantes.blank Then
        tablero.seleccionado[1, 0] = x
        tablero.seleccionado[1, 1] = constantes.squares - y + 1

        If editandotablero <> 1 Then
          ejecutajugada = False
          mov = New ClassMovimiento(tablero.seleccionado[0, 0], constantes.squares - tablero.seleccionado[0, 1] + 1, tablero.seleccionado[1, 0], constantes.squares - tablero.seleccionado[1, 1] + 1)
          'comprobar movimiento valido...
          listamovArray = ModuloCalculos.GenerateMoveList(tablero, turno)
          'Print "Movimientos posibles..."
          'Print listamovArray.escribe()

          mimovimientoinicial = "(" & Str$(tablero.seleccionado[0, 0]) & "," & Str(constantes.squares - tablero.seleccionado[0, 1] + 1) & ")"
          mimovimientofinal = "(" & Str$(tablero.seleccionado[1, 0]) & "," & Str(constantes.squares - tablero.seleccionado[1, 1] + 1) & ")"
          '  Print "Mi movimiento: "; mimovimientoinicial; " a "; mimovimientofinal
          'compruebo en la lista de movimiento si existe esa posibilidad
          For a = 0 To listamovArray.lista.count - 1
            '   Print a; "Inicio..."
            '   Print listamovArray.lista[a].movimiento[0].x0, listamovArray.lista[a].movimiento[0].y0
            '   Print tablero.seleccionado[0, 0], (8 - tablero.seleccionado[0, 1] + 1)
            If listamovArray.lista[a].movimiento[0].x0 = tablero.seleccionado[0, 0] And listamovArray.lista[a].movimiento[0].y0 = (8 - tablero.seleccionado[0, 1] + 1) Then
              '   Print a; "Fin..."
              '  Print listamovArray.lista[a].movimiento[0].x1, listamovArray.lista[a].movimiento[0].y1
              '  Print tablero.seleccionado[1, 0], (8 - tablero.seleccionado[1, 1] + 1)
              If listamovArray.lista[a].movimiento[listamovArray.lista[a].movimiento.max].x1 = tablero.seleccionado[1, 0] And listamovArray.lista[a].movimiento[listamovArray.lista[a].movimiento.Max].y1 = (8 - tablero.seleccionado[1, 1] + 1) Then

                '  Print "ejecuta la jugada..."
                ejecutajugada = True
                '   tablero = ModuloCalculos.MakeMove(tablero, listamovArray.lista[a], True)

                listamov = listamovArray.lista[a]
                Break
              Endif
            Endif
          Next
          If ejecutajugada = False Then
            tablero.seleccionado[0, 0] = 0
            tablero.seleccionado[1, 1] = 0
            casilla = 0
            tablero.displayboard(DrawingArea1)
            Message("No se puede realizar esa jugada...")
          Endif
          If ejecutajugada = True Then
            '   tablero.displayboard(DrawingArea1)
            '
            '         listamovimientos.Clear
            '        listamovimientos.Add(movUsuarioLista)

            '       listamov.movimiento = listamovimientos
            ButtonCancela_Click()
            escribeMovimientoyCambiaTurno(listamov)

            If constantes.PlayerStrategy[Str$(turno)] <> "0" Then
              'el siguiente jugador es el ordenador
              Wait 0.5
              RelojIA()
            Endif
            ButtonCancela_Click()
          Endif
        Endif
      Endif
    Else

      'Si es la primera casilla, debe de contener pieza del mismo color del turno

      'contiene misma ficha de color

      If tablero.tablero[x, y] = turno Or tablero.tablero[x, y] = turno * constantes.king Then
        tablero.seleccionado[0, 0] = x
        tablero.seleccionado[0, 1] = constantes.squares - y + 1
        tablero.displayboard(DrawingArea1)
        casilla = 2
      Endif
    Endif

  Endif

  If editandotablero = 1 Then
    If xant = x And yant = y Then
      piezaAponer += 1
    Else
      piezaAponer = 1
    Endif
    Select piezaAponer
      Case 1
        tablero.tablero[x, y] = constantes.black
      Case 2
        tablero.tablero[x, y] = - constantes.king
      Case 3
        tablero.tablero[x, y] = constantes.white
      Case 4
        tablero.tablero[x, y] = constantes.king
      Case 5
        piezaAponer = 0
        tablero.tablero[x, y] = Constantes.blank
    End Select
    tablero.displayboard(drawingarea1)
    'Print piezaAponer
    xant = x
    yant = y
  Endif

End

Public Sub ToolButtonCrearPosicion_Click()

  Dim a As Integer
  Dim b As Integer

  drawingarea1.Tooltip = "Haga click en la celda para ir dibujando la pieza"
  editandotablero = 1
  For a = 0 To constantes.squares
    For b = 0 To constantes.squares
      tablero.tablero[a, b] = 0

    Next
  Next

  tablero.displayboard(DrawingArea1)
  ToolButtonJugar.Enabled = False
  ButtonJugar.Enabled = True

End

Public Sub ButtonJugar_Click()

  Dim jugadorturno As String

  GenerarGridJugadas()
  ButtonJugar.enabled = False
  FormNueva.ShowDialog()
  jugadorturno = If(turno = Constantes.black, "Negro", "Blanco")
  LabelMensajes.text = "Turno del jugador " & jugadorturno & " (" & Constantes.PlayerStrategy[Constantes.Colorblack] & ")"
  LabelMensajes.Refresh()

  editandotablero = 0
  FMain.finjuego = False

  'compruebo que el jugador white es humano
  If constantes.PlayerStrategy[Str$(turno)] <> "0" Then
    'es el turno del ordenador

    RelojIA()

  Endif

End
